{"ast":null,"code":"var _jsxFileName = \"/Users/bengallagher/Desktop/Challenges 2/pokeTrader/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport pokeAPI from \"./utils/pokeAPI\";\nimport { generatePokemonStats, generatePokemonLevel } from \"./utils/actualizedStats\";\nimport PokeStorePage from \"./pages/PokeStorePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //set state at APP level to track all pokemon in our pokedexDB\n  const [pokedex, setPokedex] = useState([]); // console.log(pokedex);\n  //useEffect to call our API file on App load and setPokedex to the returned array of pokemon\n\n  useEffect(() => {\n    // pokemon getAll fetch\n    pokeAPI.get(\"/pokemon/\", {}).then(response => {\n      // console.log(response.data.results);\n      const pokemonURL = response.data.results.map(pokemon => {\n        return pokemon.url;\n      });\n      setPokedex(pokemonURL);\n    }).catch(err => console.log(err)); //[] run once on app load\n  }, []);\n  return (\n    /*#__PURE__*/\n    //conditionally render pages\n    _jsxDEV(PokeStorePage, {\n      pokedex: pokedex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"S5daK7qqcKkyKtq9szxGs4BXkIU=\");\n\n_c = App;\nexport default App; // const client = new ApolloClient({\n//   request: (operation) => {\n//     const token = localStorage.getItem(\"id_token\");\n//     operation.setContext({\n//       headers: {\n//         authorization: token ? `Bearer ${token}` : \"\",\n//       },\n//     });\n//   },\n//   uri: \"/graphql\",\n// });\n//or use Context.Provider? \n// {/* <ApolloProvider client = {client} >\n// <Router>\n//   <>\n//     <Switch>\n//       <Route exact path='/' component={PokemonStorePage} />\n//       <Route exact path='/profile' component={ProfilePage} />\n//       <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n//     </Switch>\n//   </>\n// </Router>\n// </ ApolloProvider> */}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/bengallagher/Desktop/Challenges 2/pokeTrader/client/src/App.js"],"names":["React","useState","useEffect","pokeAPI","generatePokemonStats","generatePokemonLevel","PokeStorePage","App","pokedex","setPokedex","get","then","response","pokemonURL","data","results","map","pokemon","url","catch","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SACEC,oBADF,EAEEC,oBAFF,QAGO,yBAHP;AAIA,OAAOC,aAAP,MAA0B,uBAA1B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAFa,CAGb;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAC,IAAAA,OAAO,CACJO,GADH,CACO,WADP,EACoB,EADpB,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB;AAEA,YAAMC,UAAU,GAAGD,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsBC,GAAtB,CAA2BC,OAAD,IAAa;AACxD,eAAOA,OAAO,CAACC,GAAf;AACD,OAFkB,CAAnB;AAIAT,MAAAA,UAAU,CAACI,UAAD,CAAV;AACD,KAVH,EAWGM,KAXH,CAWUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXlB,EAFc,CAed;AACD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA;AAAA;AACE;AACA,YAAC,aAAD;AAAe,MAAA,OAAO,EAAEZ;AAAxB;AAAA;AAAA;AAAA;AAAA;AAFF;AAID;;GA5BQD,G;;KAAAA,G;AA8BT,eAAeA,GAAf,C,CAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport pokeAPI from \"./utils/pokeAPI\";\nimport {\n  generatePokemonStats,\n  generatePokemonLevel,\n} from \"./utils/actualizedStats\";\nimport PokeStorePage from \"./pages/PokeStorePage\";\n\nfunction App() {\n  //set state at APP level to track all pokemon in our pokedexDB\n  const [pokedex, setPokedex] = useState([]);\n  // console.log(pokedex);\n\n  //useEffect to call our API file on App load and setPokedex to the returned array of pokemon\n  useEffect(() => {\n    // pokemon getAll fetch\n    pokeAPI\n      .get(\"/pokemon/\", {})\n      .then((response) => {\n        // console.log(response.data.results);\n\n        const pokemonURL = response.data.results.map((pokemon) => {\n          return pokemon.url;\n        });\n\n        setPokedex(pokemonURL);\n      })\n      .catch((err) => console.log(err));\n\n    //[] run once on app load\n  }, []);\n\n  return (\n    //conditionally render pages\n    <PokeStorePage pokedex={pokedex} />\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n// const client = new ApolloClient({\n//   request: (operation) => {\n//     const token = localStorage.getItem(\"id_token\");\n\n//     operation.setContext({\n//       headers: {\n//         authorization: token ? `Bearer ${token}` : \"\",\n//       },\n//     });\n//   },\n//   uri: \"/graphql\",\n// });\n\n\n//or use Context.Provider? \n\n// {/* <ApolloProvider client = {client} >\n// <Router>\n//   <>\n//     <Switch>\n//       <Route exact path='/' component={PokemonStorePage} />\n//       <Route exact path='/profile' component={ProfilePage} />\n//       <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n//     </Switch>\n//   </>\n// </Router>\n// </ ApolloProvider> */}"]},"metadata":{},"sourceType":"module"}