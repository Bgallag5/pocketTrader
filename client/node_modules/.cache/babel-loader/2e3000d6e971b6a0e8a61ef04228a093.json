{"ast":null,"code":"var _jsxFileName = \"/Users/bengallagher/Desktop/Challenges 2/pokeTrader/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport pokeAPI from './utils/pokeAPI'; // import { pokemonJSON } from './utils/pokeAPI';\n\nimport PokeStorePage from \"./pages/PokeStorePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //set state at APP level to track all pokemon in our pokedexDB \n  const [pokedex, setPokedex] = useState([]);\n  console.log(pokedex); //useEffect to call our API file on App load and setPokedex to the returned array of pokemon \n\n  useEffect(() => {\n    console.log('USED EFFECT IN APP'); // pokemon getAll fetch\n\n    pokeAPI.get('/pokemon/', {}).then(response => {\n      console.log('RESPONSE');\n      console.log(response);\n      console.log(response.data.results);\n      const pokemonURL = response.data.results.map(pokemon => {\n        return pokemon.url;\n      }); //sets pokemon to array of urls, how do we use this/ store it\n      //lets probably use useStoreContext \n\n      setPokedex(pokemonURL);\n    }).catch(err => console.log(err)); //[] run once on app load \n  }, []);\n  return (\n    /*#__PURE__*/\n    //conditionally render pages \n    _jsxDEV(PokeStorePage, {\n      pokedex: pokedex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"S5daK7qqcKkyKtq9szxGs4BXkIU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/bengallagher/Desktop/Challenges 2/pokeTrader/client/src/App.js"],"names":["React","useState","useEffect","pokeAPI","PokeStorePage","App","pokedex","setPokedex","console","log","get","then","response","data","results","pokemonURL","map","pokemon","url","catch","err"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,iBAApB,C,CACA;;AAEA,OAAOC,aAAP,MAA0B,uBAA1B;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAyBN,QAAQ,CAAC,EAAD,CAAvC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAJa,CAOb;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADc,CAEd;;AAEAN,IAAAA,OAAO,CAACO,GAAR,CAAY,WAAZ,EAAyB,EAAzB,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAClBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACC,IAAT,CAAcC,OAA1B;AAEA,YAAMC,UAAU,GAAGH,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBE,GAAtB,CAA0BC,OAAO,IAAI;AACtD,eAAOA,OAAO,CAACC,GAAf;AACD,OAFkB,CAAnB,CALkB,CASlB;AACA;;AACAX,MAAAA,UAAU,CAACQ,UAAD,CAAV;AACD,KAdD,EAeCI,KAfD,CAeOC,GAAG,IAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAfd,EAJc,CAqBd;AACD,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA;AAAA;AACE;AACA,YAAC,aAAD;AAAgB,MAAA,OAAO,EAAGd;AAA1B;AAAA;AAAA;AAAA;AAAA;AAFF;AAID;;GApCQD,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport pokeAPI from './utils/pokeAPI';\n// import { pokemonJSON } from './utils/pokeAPI';\n\nimport PokeStorePage from \"./pages/PokeStorePage\";\n\n\n\nfunction App() {\n\n  //set state at APP level to track all pokemon in our pokedexDB \n  const [pokedex, setPokedex]  = useState([])\n  console.log(pokedex);\n\n\n  //useEffect to call our API file on App load and setPokedex to the returned array of pokemon \n  useEffect(() => {\n    console.log('USED EFFECT IN APP');\n    // pokemon getAll fetch\n    \n    pokeAPI.get('/pokemon/', {\n\n    }).then(response => {\n      console.log('RESPONSE');\n      console.log(response);\n      console.log(response.data.results);\n      \n      const pokemonURL = response.data.results.map(pokemon => {\n        return pokemon.url\n      })\n      \n      //sets pokemon to array of urls, how do we use this/ store it\n      //lets probably use useStoreContext \n      setPokedex(pokemonURL)\n    })\n    .catch(err => console.log(err))\n\n    //[] run once on app load \n  }, [])\n\n  return (\n    //conditionally render pages \n    <PokeStorePage  pokedex= {pokedex} />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}